"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/room/[id]/page",{

/***/ "(app-pages-browser)/./src/lib/roomService.ts":
/*!********************************!*\
  !*** ./src/lib/roomService.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   roomService: function() { return /* binding */ roomService; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\n// List of debate topics for the MVP\nconst DEBATE_TOPICS = [\n    \"Should AI be regulated?\",\n    \"Is social media harmful to democracy?\",\n    \"Should college education be free?\",\n    \"Is remote work better than office work?\",\n    \"Should voting be mandatory?\"\n];\n// Helper function to generate a UUID v4\nfunction generateUUID() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c == \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\nconst roomService = {\n    // Helper to get current user ID (supports both auth and guest users)\n    async getUserId () {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (error || !(data === null || data === void 0 ? void 0 : data.user)) {\n            // Generate a consistent guest ID for this session\n            let guestId = sessionStorage.getItem(\"guestId\");\n            if (!guestId) {\n                guestId = generateUUID();\n                sessionStorage.setItem(\"guestId\", guestId);\n                console.log(\"Generated new guest ID:\", guestId);\n            }\n            return guestId;\n        }\n        return data.user.id;\n    },\n    // Create a new room\n    async createRoom () {\n        const userId = await this.getUserId();\n        const randomTopic = DEBATE_TOPICS[Math.floor(Math.random() * DEBATE_TOPICS.length)];\n        console.log(\"\\uD83C\\uDFD7️ Creating room with user ID:\", userId);\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").insert([\n            {\n                topic: randomTopic,\n                status: \"waiting\",\n                player_a_health: 100,\n                player_b_health: 100,\n                player_a_id: userId\n            }\n        ]).select().single();\n        if (error) {\n            console.error(\"❌ Error creating room:\", error);\n            return null;\n        }\n        console.log(\"✅ Room created successfully:\", data);\n        return data;\n    },\n    // Join an existing room\n    async joinRoom (roomId) {\n        try {\n            console.log(\"\\uD83D\\uDEAA Attempting to join room:\", roomId);\n            // First, get the room to check its status\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                console.error(\"❌ Error fetching room:\", fetchError);\n                throw new Error(\"Room not found\");\n            }\n            console.log(\"\\uD83D\\uDCCB Current room state:\", room);\n            // Check if room is full\n            if (room.player_a_id && room.player_b_id) {\n                console.log(\"\\uD83D\\uDEAB Room is full\");\n                throw new Error(\"Room is full\");\n            }\n            // Get user ID for the person joining\n            const joiningUserId = await this.getUserId();\n            console.log(\"\\uD83D\\uDC64 Joining user ID:\", joiningUserId);\n            // Check if this user is already in the room\n            if (room.player_a_id === joiningUserId) {\n                console.log(\"✅ User is already Player A in this room\");\n                return room;\n            }\n            if (room.player_b_id === joiningUserId) {\n                console.log(\"✅ User is already Player B in this room\");\n                return room;\n            }\n            // Determine which player slot to fill\n            let updateData;\n            if (!room.player_a_id) {\n                // If Player A slot is empty, fill it\n                updateData = {\n                    player_a_id: joiningUserId\n                };\n                console.log(\"\\uD83D\\uDC51 Assigning as Player A\");\n            } else {\n                // Assign as Player B and update status\n                updateData = {\n                    player_b_id: joiningUserId,\n                    status: \"ready_to_start\" // Both players present\n                };\n                console.log(\"\\uD83C\\uDFAF Assigning as Player B\");\n            }\n            console.log(\"\\uD83D\\uDCBE Update data:\", updateData);\n            // Update the room\n            const { data: updatedRoom, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"❌ Error joining room:\", updateError);\n                throw new Error(\"Failed to join room\");\n            }\n            console.log(\"✅ Successfully joined room:\", updatedRoom);\n            return updatedRoom;\n        } catch (error) {\n            console.error(\"\\uD83D\\uDCA5 Join room error:\", error);\n            throw error;\n        }\n    },\n    // Get room details\n    async getRoom (roomId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n        if (error) {\n            console.error(\"Error fetching room:\", error);\n            return null;\n        }\n        return data;\n    },\n    // Get current user's role in room\n    async getUserRole (roomId) {\n        const userId = await this.getUserId();\n        const room = await this.getRoom(roomId);\n        if (!room) return \"spectator\";\n        if (room.player_a_id === userId) return \"player_a\";\n        if (room.player_b_id === userId) return \"player_b\";\n        return \"spectator\";\n    },\n    // Subscribe to room changes with better error handling\n    subscribeToRoom (roomId, callback) {\n        console.log(\"\\uD83D\\uDD14 Setting up subscription for room:\", roomId);\n        const channel = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.channel(\"room-\".concat(roomId)).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"rooms\",\n            filter: \"id=eq.\".concat(roomId)\n        }, (payload)=>{\n            console.log(\"\\uD83D\\uDD04 Real-time update received:\", payload);\n            if (payload.new) {\n                callback(payload.new);\n            }\n        }).subscribe((status, err)=>{\n            console.log(\"\\uD83D\\uDCE1 Subscription status:\", status);\n            if (err) {\n                console.error(\"❌ Subscription error:\", err);\n            }\n        });\n        return {\n            unsubscribe: ()=>{\n                console.log(\"\\uD83D\\uDD07 Unsubscribing from room updates\");\n                _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.removeChannel(channel);\n            }\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/roomService.ts\n"));

/***/ })

});