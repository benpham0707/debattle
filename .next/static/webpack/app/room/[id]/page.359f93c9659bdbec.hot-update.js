"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/room/[id]/page",{

/***/ "(app-pages-browser)/./src/lib/roleManager.ts":
/*!********************************!*\
  !*** ./src/lib/roleManager.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStablePlayerRole: function() { return /* binding */ getStablePlayerRole; },\n/* harmony export */   getStableSessionId: function() { return /* binding */ getStableSessionId; },\n/* harmony export */   roleManager: function() { return /* binding */ roleManager; },\n/* harmony export */   usePlayerRole: function() { return /* binding */ usePlayerRole; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// src/lib/roleManager.ts\n// Role management system with unique session IDs per browser tab\n\n// Helper function to generate a proper UUID v4\nfunction generateUUID() {\n    // Use crypto.randomUUID if available (modern browsers)\n    if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    // Fallback to manual generation (proper UUID v4 format)\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n// Single source of truth for role management\nclass RoleManager {\n    static getInstance() {\n        if (!RoleManager.instance) {\n            RoleManager.instance = new RoleManager();\n        }\n        return RoleManager.instance;\n    }\n    // Generate a unique session ID for this specific browser tab\n    generateTabSessionId() {\n        // Check if we already have a session ID for this tab\n        if (this.tabSessionId) {\n            return this.tabSessionId;\n        }\n        // Generate a new UUID for this tab session\n        this.tabSessionId = generateUUID();\n        console.log(\"\\uD83C\\uDD95 ROLE MANAGER - Generated new tab session UUID:\", this.tabSessionId.slice(-8));\n        return this.tabSessionId;\n    }\n    // Validate UUID format\n    isValidUUID(uuid) {\n        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return uuidRegex.test(uuid);\n    }\n    // Initialize or retrieve role for a specific room\n    async initializeRole(roomId, room) {\n        const sessionKey = \"debattle_role_\".concat(roomId);\n        // First, check if we already have a locked role for this room\n        const existingSession = localStorage.getItem(sessionKey);\n        if (existingSession) {\n            try {\n                const parsed = JSON.parse(existingSession);\n                // Validate that the session is still valid and has proper UUID\n                if (this.isValidUUID(parsed.sessionId) && this.validateSession(parsed, room)) {\n                    console.log(\"✅ ROLE MANAGER - Restored existing valid session:\", {\n                        role: parsed.playerRole,\n                        sessionId: parsed.sessionId.slice(-8),\n                        isLocked: parsed.isLocked\n                    });\n                    this.currentSession = parsed;\n                    this.tabSessionId = parsed.sessionId // Remember this tab's session ID\n                    ;\n                    return parsed;\n                } else {\n                    console.log(\"❌ ROLE MANAGER - Existing session invalid, will create new one\");\n                    localStorage.removeItem(sessionKey);\n                }\n            } catch (error) {\n                console.error(\"❌ ROLE MANAGER - Error parsing existing session:\", error);\n                localStorage.removeItem(sessionKey);\n            }\n        }\n        // Create new session if none exists or existing is invalid\n        const sessionId = this.generateTabSessionId();\n        const playerRole = await this.determineRoleFromRoom(room, sessionId);\n        const newSession = {\n            sessionId,\n            playerRole,\n            roomId,\n            assignedAt: Date.now(),\n            isLocked: room.status === \"debating\" // Lock role once game starts\n        };\n        // Save the session\n        localStorage.setItem(sessionKey, JSON.stringify(newSession));\n        this.currentSession = newSession;\n        console.log(\"\\uD83C\\uDFAD ROLE MANAGER - Created new session:\", {\n            role: newSession.playerRole,\n            sessionId: newSession.sessionId.slice(-8),\n            isLocked: newSession.isLocked,\n            roomStatus: room.status\n        });\n        return newSession;\n    }\n    // Validate that a session is still valid for the current room state\n    validateSession(session, room) {\n        // Check if room still exists and session ID matches expected player\n        if (session.playerRole === \"player_a\") {\n            return room.player_a_id === session.sessionId;\n        } else if (session.playerRole === \"player_b\") {\n            return room.player_b_id === session.sessionId;\n        } else {\n            return session.playerRole === \"spectator\" // Spectators are always valid\n            ;\n        }\n    }\n    // Determine role based on room state and session ID\n    async determineRoleFromRoom(room, sessionId) {\n        var _room_player_a_id, _room_player_b_id;\n        console.log(\"\\uD83D\\uDD0D ROLE MANAGER - Determining role from room:\", {\n            sessionId: sessionId.slice(-8),\n            roomPlayerA: (_room_player_a_id = room.player_a_id) === null || _room_player_a_id === void 0 ? void 0 : _room_player_a_id.slice(-8),\n            roomPlayerB: (_room_player_b_id = room.player_b_id) === null || _room_player_b_id === void 0 ? void 0 : _room_player_b_id.slice(-8)\n        });\n        // Check direct ID matches first\n        if (room.player_a_id === sessionId) {\n            console.log(\"✅ ROLE MANAGER - Matched as Player A by ID\");\n            return \"player_a\";\n        }\n        if (room.player_b_id === sessionId) {\n            console.log(\"✅ ROLE MANAGER - Matched as Player B by ID\");\n            return \"player_b\";\n        }\n        // If no match found, user is a spectator\n        console.log(\"\\uD83D\\uDC40 ROLE MANAGER - No match found, assigned as spectator\");\n        return \"spectator\";\n    }\n    // Get current session (used by components)\n    getCurrentSession() {\n        return this.currentSession;\n    }\n    // Lock the role once game starts (prevents changes during game)\n    lockRole(roomId) {\n        if (this.currentSession && this.currentSession.roomId === roomId) {\n            this.currentSession.isLocked = true;\n            const sessionKey = \"debattle_role_\".concat(roomId);\n            localStorage.setItem(sessionKey, JSON.stringify(this.currentSession));\n            console.log(\"\\uD83D\\uDD12 ROLE MANAGER - Role locked for game session\");\n        }\n    }\n    // Clear role when leaving room\n    clearRole(roomId) {\n        const sessionKey = \"debattle_role_\".concat(roomId);\n        localStorage.removeItem(sessionKey);\n        if (this.currentSession && this.currentSession.roomId === roomId) {\n            this.currentSession = null;\n        }\n        console.log(\"\\uD83E\\uDDF9 ROLE MANAGER - Cleared role for room:\", roomId.slice(-8));\n    }\n    // Get session ID for room service compatibility (ensures proper UUID format)\n    getSessionId() {\n        if (this.currentSession && this.isValidUUID(this.currentSession.sessionId)) {\n            return this.currentSession.sessionId;\n        }\n        // Generate new UUID for this tab if current session is invalid\n        const newId = this.generateTabSessionId();\n        console.log(\"\\uD83C\\uDD95 ROLE MANAGER - Using tab session ID:\", newId.slice(-8));\n        return newId;\n    }\n    // Debug helper\n    debugSession(roomId) {\n        var _this_tabSessionId;\n        const sessionKey = \"debattle_role_\".concat(roomId);\n        const stored = localStorage.getItem(sessionKey);\n        console.log(\"\\uD83D\\uDD0D ROLE MANAGER DEBUG:\", {\n            currentSession: this.currentSession,\n            storedSession: stored ? JSON.parse(stored) : null,\n            tabSessionId: (_this_tabSessionId = this.tabSessionId) === null || _this_tabSessionId === void 0 ? void 0 : _this_tabSessionId.slice(-8),\n            allDebattleKeys: Object.keys(localStorage).filter((k)=>k.includes(\"debattle\"))\n        });\n    }\n    // Clean up invalid session data\n    cleanupInvalidSessions() {\n        const keys = Object.keys(localStorage).filter((k)=>k.includes(\"debattle\"));\n        let cleaned = 0;\n        keys.forEach((key)=>{\n            try {\n                const value = localStorage.getItem(key);\n                if (value) {\n                    // For role sessions, check if they have valid UUIDs\n                    if (key.includes(\"debattle_role_\")) {\n                        const session = JSON.parse(value);\n                        if (!this.isValidUUID(session.sessionId)) {\n                            localStorage.removeItem(key);\n                            cleaned++;\n                            console.log(\"\\uD83E\\uDDF9 ROLE MANAGER - Cleaned invalid session:\", key);\n                        }\n                    }\n                // Skip global session cleanup since we're using per-tab sessions now\n                }\n            } catch (error) {\n                localStorage.removeItem(key);\n                cleaned++;\n                console.log(\"\\uD83E\\uDDF9 ROLE MANAGER - Cleaned corrupted session:\", key);\n            }\n        });\n        if (cleaned > 0) {\n            console.log(\"\\uD83E\\uDDF9 ROLE MANAGER - Cleaned \".concat(cleaned, \" invalid sessions\"));\n        }\n    }\n    // Force generate new session (useful for testing)\n    forceNewSession() {\n        this.tabSessionId = null;\n        return this.generateTabSessionId();\n    }\n    constructor(){\n        this.currentSession = null;\n        this.tabSessionId = null // Unique per tab\n        ;\n    }\n}\nconst roleManager = RoleManager.getInstance();\n// Initialize cleanup on module load\nif (true) {\n    roleManager.cleanupInvalidSessions();\n}\n// Helper hook for React components\nfunction usePlayerRole(roomId, room) {\n    const [session, setSession] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(null);\n    const [isLoading, setIsLoading] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(true);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(()=>{\n        if (!room) return;\n        const initRole = async ()=>{\n            try {\n                const playerSession = await roleManager.initializeRole(roomId, room);\n                setSession(playerSession);\n                // Lock role if game is in progress\n                if (room.status === \"debating\" && !playerSession.isLocked) {\n                    roleManager.lockRole(roomId);\n                }\n            } catch (error) {\n                console.error(\"Error initializing role:\", error);\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        initRole();\n    }, [\n        roomId,\n        room === null || room === void 0 ? void 0 : room.id\n    ]) // Only re-run if roomId or room.id changes\n    ;\n    return {\n        session,\n        isLoading\n    };\n}\n// Compatibility functions for existing code\nfunction getStablePlayerRole(roomId) {\n    const session = roleManager.getCurrentSession();\n    if (session && session.roomId === roomId) {\n        return session.playerRole;\n    }\n    return \"spectator\";\n}\nfunction getStableSessionId() {\n    return roleManager.getSessionId();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/roleManager.ts\n"));

/***/ })

});