"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/roomService.ts":
/*!********************************!*\
  !*** ./src/lib/roomService.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   roomService: function() { return /* binding */ roomService; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\n// List of debate topics for the MVP\nconst DEBATE_TOPICS = [\n    \"Should AI be regulated?\",\n    \"Is social media harmful to democracy?\",\n    \"Should college education be free?\",\n    \"Is remote work better than office work?\",\n    \"Should voting be mandatory?\",\n    \"Is climate change the most urgent global issue?\",\n    \"Should universal basic income be implemented?\",\n    \"Is social media more harmful than helpful?\",\n    \"Should genetic engineering be widely used?\",\n    \"Is online learning better than traditional classroom education?\"\n];\n// Helper function to generate a proper UUID v4\nfunction generateUUID() {\n    // Use crypto.randomUUID if available (modern browsers)\n    if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\n        return crypto.randomUUID();\n    }\n    // Fallback to manual generation\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\n// Store session ID globally for this browser session\nlet currentSessionId = null;\nconst roomService = {\n    // Helper to get current Supabase user ID\n    async getUserId () {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (error || !(data === null || data === void 0 ? void 0 : data.user)) {\n            return null;\n        }\n        return data.user.id;\n    },\n    // Get or create session ID for this browser session\n    getSessionId () {\n        if (!currentSessionId) {\n            currentSessionId = generateUUID();\n            console.log(\"Generated new session ID:\", currentSessionId);\n        }\n        return currentSessionId;\n    },\n    // Create a new room\n    async createRoom () {\n        let userId = await this.getUserId();\n        console.log(\"Original user ID:\", userId);\n        // If no authenticated user, use session UUID for guests\n        if (!userId) {\n            userId = this.getSessionId();\n            console.log(\"Using session UUID for room creator:\", userId);\n        }\n        const randomTopic = DEBATE_TOPICS[Math.floor(Math.random() * DEBATE_TOPICS.length)];\n        console.log(\"Creating room with user ID:\", userId);\n        console.log(\"User ID type:\", typeof userId, \"Length:\", userId.length);\n        const roomData = {\n            topic: randomTopic,\n            status: \"waiting\",\n            player_a_health: 100,\n            player_b_health: 100,\n            player_a_ready: false,\n            player_b_ready: false,\n            player_a_id: userId\n        };\n        console.log(\"Room data to insert:\", roomData);\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").insert([\n            roomData\n        ]).select().single();\n        if (error) {\n            console.error(\"Error creating room:\", error);\n            throw new Error(\"Failed to create room: \".concat(error.message));\n        }\n        console.log(\"Successfully created room:\", data);\n        return {\n            room: data,\n            playerRole: \"player_a\"\n        };\n    },\n    // Join an existing room with proper error handling\n    async joinRoom (roomId, userId) {\n        try {\n            // Use provided userId or get current user ID or use session ID\n            let actualUserId = userId || await this.getUserId();\n            if (!actualUserId) {\n                actualUserId = this.getSessionId();\n                console.log(\"Using session UUID for room joiner:\", actualUserId);\n            }\n            console.log(\"Join room attempt with user ID:\", actualUserId);\n            console.log(\"User ID type:\", typeof actualUserId, \"Length:\", actualUserId.length);\n            // Validate UUID format\n            const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n            if (!uuidRegex.test(actualUserId)) {\n                console.error(\"Invalid UUID format:\", actualUserId);\n                // Generate a new proper UUID\n                actualUserId = generateUUID();\n                console.log(\"Generated new UUID:\", actualUserId);\n            }\n            // First, check if the room exists and get its current state\n            const { data: currentRoom, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError) {\n                console.error(\"Error fetching room:\", fetchError);\n                if (fetchError.code === \"PGRST116\") {\n                    throw new Error(\"Room not found\");\n                }\n                throw new Error(\"Database error: \".concat(fetchError.message));\n            }\n            if (!currentRoom) {\n                throw new Error(\"Room not found\");\n            }\n            console.log(\"Current room state:\", {\n                id: currentRoom.id,\n                player_a_id: currentRoom.player_a_id,\n                player_b_id: currentRoom.player_b_id,\n                status: currentRoom.status\n            });\n            // Check if user is already in the room\n            if (currentRoom.player_a_id === actualUserId) {\n                console.log(\"User already in room as Player A\");\n                return {\n                    room: currentRoom,\n                    playerRole: \"player_a\"\n                };\n            }\n            if (currentRoom.player_b_id === actualUserId) {\n                console.log(\"User already in room as Player B\");\n                return {\n                    room: currentRoom,\n                    playerRole: \"player_b\"\n                };\n            }\n            // Check if room is full\n            if (currentRoom.player_a_id && currentRoom.player_b_id) {\n                throw new Error(\"Room is full\");\n            }\n            // Determine which slot to fill\n            let updateData;\n            let playerRole;\n            if (!currentRoom.player_a_id) {\n                updateData = {\n                    player_a_id: actualUserId,\n                    player_a_ready: false\n                };\n                playerRole = \"player_a\";\n                console.log(\"Joining as Player A\");\n            } else {\n                updateData = {\n                    player_b_id: actualUserId,\n                    player_b_ready: false\n                };\n                playerRole = \"player_b\";\n                console.log(\"Joining as Player B\");\n            }\n            console.log(\"Update data:\", updateData);\n            // Update the room\n            const { data: updatedRoom, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error updating room:\", updateError);\n                throw new Error(\"Failed to join room: \".concat(updateError.message));\n            }\n            if (!updatedRoom) {\n                throw new Error(\"Failed to update room - no data returned\");\n            }\n            console.log(\"Successfully joined room as:\", playerRole);\n            console.log(\"Updated room:\", updatedRoom);\n            return {\n                room: updatedRoom,\n                playerRole\n            };\n        } catch (error) {\n            console.error(\"Join room error:\", error);\n            throw error;\n        }\n    },\n    // Start side selection phase\n    async startSideSelection (roomId) {\n        try {\n            const deadline = new Date(Date.now() + 10000) // 10 seconds from now\n            ;\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update({\n                status: \"side_selection\",\n                current_phase: \"side_selection\",\n                side_selection_deadline: deadline.toISOString(),\n                phase_start_time: new Date().toISOString(),\n                phase_duration: 10\n            }).eq(\"id\", roomId).select().single();\n            if (error) {\n                console.error(\"Error starting side selection:\", error);\n                throw new Error(\"Failed to start side selection: \".concat(error.message));\n            }\n            console.log(\"âœ… Side selection started\");\n            return data;\n        } catch (error) {\n            console.error(\"Start side selection error:\", error);\n            throw error;\n        }\n    },\n    // Submit side vote\n    async submitSideVote (roomId, side) {\n        try {\n            let userId = await this.getUserId();\n            if (!userId) {\n                userId = this.getSessionId();\n            }\n            // Get current room to determine player role\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                throw new Error(\"Room not found\");\n            }\n            let updateData = {};\n            if (room.player_a_id === userId) {\n                updateData.player_a_side_vote = side;\n                console.log(\"Player A voted for:\", side);\n            } else if (room.player_b_id === userId) {\n                updateData.player_b_side_vote = side;\n                console.log(\"Player B voted for:\", side);\n            } else {\n                throw new Error(\"You are not in this room\");\n            }\n            // Update the room with the vote\n            const { data, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error submitting vote:\", updateError);\n                throw new Error(\"Failed to submit vote: \".concat(updateError.message));\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Submit side vote error:\", error);\n            throw error;\n        }\n    },\n    // Calculate final side assignments after voting period\n    async finalizeSideSelection (roomId) {\n        try {\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                throw new Error(\"Room not found\");\n            }\n            let playerASide;\n            let playerBSide;\n            // Apply your logic for side assignment\n            if (room.player_a_side_vote && room.player_b_side_vote) {\n                if (room.player_a_side_vote === room.player_b_side_vote) {\n                    // Both chose same side - random assignment\n                    if (Math.random() > 0.5) {\n                        playerASide = \"pro\";\n                        playerBSide = \"con\";\n                    } else {\n                        playerASide = \"con\";\n                        playerBSide = \"pro\";\n                    }\n                } else {\n                    // Different sides - honor their choices\n                    playerASide = room.player_a_side_vote;\n                    playerBSide = room.player_b_side_vote;\n                }\n            } else if (room.player_a_side_vote && !room.player_b_side_vote) {\n                // Only A voted - A gets choice, B gets opposite\n                playerASide = room.player_a_side_vote;\n                playerBSide = room.player_a_side_vote === \"pro\" ? \"con\" : \"pro\";\n            } else if (!room.player_a_side_vote && room.player_b_side_vote) {\n                // Only B voted - B gets choice, A gets opposite\n                playerBSide = room.player_b_side_vote;\n                playerASide = room.player_b_side_vote === \"pro\" ? \"con\" : \"pro\";\n            } else {\n                // Nobody voted - random assignment\n                if (Math.random() > 0.5) {\n                    playerASide = \"pro\";\n                    playerBSide = \"con\";\n                } else {\n                    playerASide = \"con\";\n                    playerBSide = \"pro\";\n                }\n            }\n            console.log(\"Final side assignments:\", {\n                playerASide,\n                playerBSide\n            });\n            // Update room with final assignments and move to opening prep phase\n            const { data, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update({\n                player_a_side: playerASide,\n                player_b_side: playerBSide,\n                current_phase: \"opening_prep\",\n                phase_start_time: new Date().toISOString(),\n                phase_duration: 30 // 30 seconds for opening prep\n            }).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error finalizing side selection:\", updateError);\n                throw new Error(\"Failed to finalize sides: \".concat(updateError.message));\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Finalize side selection error:\", error);\n            throw error;\n        }\n    },\n    // Ready up for the game\n    async readyUp (roomId) {\n        try {\n            let userId = await this.getUserId();\n            if (!userId) {\n                userId = this.getSessionId();\n            }\n            console.log(\"Ready up with user ID:\", userId);\n            // Get current room state\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                console.error(\"Error fetching room for ready up:\", fetchError);\n                throw new Error(\"Room not found\");\n            }\n            console.log(\"Current room for ready up:\", {\n                player_a_id: room.player_a_id,\n                player_b_id: room.player_b_id,\n                player_a_ready: room.player_a_ready,\n                player_b_ready: room.player_b_ready\n            });\n            // Determine which player is ready-ing up\n            let updateData = {};\n            if (room.player_a_id === userId) {\n                updateData.player_a_ready = true;\n                console.log(\"Player A readying up\");\n            } else if (room.player_b_id === userId) {\n                updateData.player_b_ready = true;\n                console.log(\"Player B readying up\");\n            } else {\n                console.error(\"User not found in room\");\n                console.error(\"Room player A ID:\", room.player_a_id);\n                console.error(\"Room player B ID:\", room.player_b_id);\n                console.error(\"Current user ID:\", userId);\n                throw new Error(\"You are not in this room\");\n            }\n            // Check if both players will be ready after this update\n            const bothReady = (room.player_a_id === userId ? true : room.player_a_ready) && (room.player_b_id === userId ? true : room.player_b_ready);\n            console.log(\"Both players ready after update:\", bothReady);\n            // If both players are ready and present, start side selection\n            if (bothReady && room.player_a_id && room.player_b_id) {\n                // Start side selection phase instead of going straight to debating\n                const deadline = new Date(Date.now() + 10000) // 10 seconds from now\n                ;\n                updateData.status = \"side_selection\";\n                updateData.current_phase = \"side_selection\";\n                updateData.side_selection_deadline = deadline.toISOString();\n                updateData.phase_start_time = new Date().toISOString();\n                updateData.phase_duration = 10;\n                console.log(\"Starting side selection phase\");\n            }\n            // Update the room\n            const { data, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error readying up:\", updateError);\n                throw new Error(\"Failed to ready up: \".concat(updateError.message));\n            }\n            console.log(\"Successfully readied up\");\n            return data;\n        } catch (error) {\n            console.error(\"Ready up error:\", error);\n            throw error;\n        }\n    },\n    // Unready\n    async unready (roomId) {\n        try {\n            let userId = await this.getUserId();\n            if (!userId) {\n                userId = this.getSessionId();\n            }\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                throw new Error(\"Room not found\");\n            }\n            let updateData = {};\n            if (room.player_a_id === userId) {\n                updateData.player_a_ready = false;\n            } else if (room.player_b_id === userId) {\n                updateData.player_b_ready = false;\n            } else {\n                throw new Error(\"You are not in this room\");\n            }\n            // Reset to waiting status\n            updateData.status = \"waiting\";\n            updateData.current_phase = null;\n            const { data, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error unreadying:\", updateError);\n                throw new Error(\"Failed to unready: \".concat(updateError.message));\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Unready error:\", error);\n            throw error;\n        }\n    },\n    // Leave room\n    async leaveRoom (roomId) {\n        try {\n            let userId = await this.getUserId();\n            if (!userId) {\n                userId = this.getSessionId();\n            }\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                throw new Error(\"Room not found\");\n            }\n            let updateData = {};\n            if (room.player_a_id === userId) {\n                updateData.player_a_id = null;\n                updateData.player_a_ready = false;\n                updateData.player_a_side_vote = null;\n                updateData.player_a_side = null;\n            } else if (room.player_b_id === userId) {\n                updateData.player_b_id = null;\n                updateData.player_b_ready = false;\n                updateData.player_b_side_vote = null;\n                updateData.player_b_side = null;\n            } else {\n                throw new Error(\"You are not in this room\");\n            }\n            // Reset room status to waiting\n            updateData.status = \"waiting\";\n            updateData.current_phase = null;\n            const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId);\n            if (updateError) {\n                console.error(\"Error leaving room:\", updateError);\n                throw new Error(\"Failed to leave room: \".concat(updateError.message));\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Leave room error:\", error);\n            throw error;\n        }\n    },\n    // Get room details\n    async getRoom (roomId) {\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (error) {\n                console.error(\"Error fetching room:\", error);\n                if (error.code === \"PGRST116\") {\n                    return null // Room not found\n                    ;\n                }\n                throw error;\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Get room error:\", error);\n            return null;\n        }\n    },\n    // Start opening prep phase\n    async startOpeningPrep (roomId) {\n        try {\n            console.log(\"\\uD83C\\uDFAF Starting opening prep phase for room:\", roomId);\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update({\n                current_phase: \"opening_prep\",\n                phase_start_time: new Date().toISOString(),\n                phase_duration: 30 // 30 seconds for prep\n            }).eq(\"id\", roomId).select().single();\n            if (error) {\n                console.error(\"Error starting opening prep:\", error);\n                throw new Error(\"Failed to start opening prep: \".concat(error.message));\n            }\n            console.log(\"âœ… Opening prep started successfully:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"Start opening prep error:\", error);\n            throw error;\n        }\n    },\n    // Start opening statements phase\n    async startOpeningStatements (roomId) {\n        try {\n            console.log(\"\\uD83C\\uDFAF Starting opening statements for room:\", roomId);\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update({\n                current_phase: \"opening\",\n                phase_start_time: new Date().toISOString(),\n                phase_duration: 70 // 30s + 10s transition + 30s\n            }).eq(\"id\", roomId).select().single();\n            if (error) {\n                console.error(\"Error starting opening statements:\", error);\n                throw new Error(\"Failed to start opening statements: \".concat(error.message));\n            }\n            console.log(\"âœ… Opening statements started successfully:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"Start opening statements error:\", error);\n            throw error;\n        }\n    },\n    async startGameWithSideSelection (roomId) {\n        try {\n            console.log(\"\\uD83C\\uDFAF Starting game with side selection for room:\", roomId);\n            const deadline = new Date(Date.now() + 10000) // 10 seconds from now\n            ;\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update({\n                status: \"debating\",\n                current_phase: \"side_selection\",\n                side_selection_deadline: deadline.toISOString(),\n                phase_start_time: new Date().toISOString(),\n                phase_duration: 10 // 10 seconds for side selection\n            }).eq(\"id\", roomId).select().single();\n            if (error) {\n                console.error(\"Error starting game with side selection:\", error);\n                throw new Error(\"Failed to start game: \".concat(error.message));\n            }\n            console.log(\"âœ… Game started with side selection successfully:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"Start game with side selection error:\", error);\n            throw error;\n        }\n    },\n    // Enhanced subscription with better error handling\n    subscribeToRoom (roomId, callback) {\n        console.log(\"Setting up subscription for room:\", roomId);\n        const channel = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.channel(\"room:\".concat(roomId, \":\").concat(Date.now())).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"rooms\",\n            filter: \"id=eq.\".concat(roomId)\n        }, (payload)=>{\n            console.log(\"\\uD83D\\uDD04 Real-time update received:\", {\n                event: payload.eventType,\n                new: payload.new ? {\n                    id: payload.new.id,\n                    player_a_id: payload.new.player_a_id ? payload.new.player_a_id.slice(-8) : null,\n                    player_b_id: payload.new.player_b_id ? payload.new.player_b_id.slice(-8) : null,\n                    status: payload.new.status,\n                    current_phase: payload.new.current_phase\n                } : null\n            });\n            if (payload.new) {\n                callback(payload.new);\n            }\n        }).subscribe((status, error)=>{\n            console.log(\"Subscription status:\", status);\n            if (error) {\n                console.error(\"Subscription error:\", error);\n            }\n            if (status === \"SUBSCRIBED\") {\n                console.log(\"âœ… Successfully subscribed to room updates\");\n            }\n        });\n        return channel;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/roomService.ts\n"));

/***/ })

});