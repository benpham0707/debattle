"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/roomService.ts":
/*!********************************!*\
  !*** ./src/lib/roomService.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   roomService: function() { return /* binding */ roomService; }\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\n// List of debate topics for the MVP\nconst DEBATE_TOPICS = [\n    \"Should AI be regulated?\",\n    \"Is social media harmful to democracy?\",\n    \"Should college education be free?\",\n    \"Is remote work better than office work?\",\n    \"Should voting be mandatory?\"\n];\n// Helper function to generate a UUID v4\nfunction generateUUID() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c == \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\nconst roomService = {\n    // Helper to get current Supabase user ID\n    async getUserId () {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        if (error || !(data === null || data === void 0 ? void 0 : data.user)) {\n            return null;\n        }\n        return data.user.id;\n    },\n    // Create a new room\n    async createRoom () {\n        let userId = await this.getUserId();\n        console.log(\"Original user ID:\", userId);\n        // If no authenticated user, generate a session UUID for guests\n        if (!userId) {\n            userId = generateUUID();\n            console.log(\"Generated guest UUID for room creator:\", userId);\n        }\n        // Double check the UUID is valid\n        if (!userId || userId === \"null\" || userId === null) {\n            userId = \"guest-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n            console.log(\"Fallback UUID generated:\", userId);\n        }\n        const randomTopic = DEBATE_TOPICS[Math.floor(Math.random() * DEBATE_TOPICS.length)];\n        console.log(\"About to create room with user ID:\", userId);\n        console.log(\"User ID type:\", typeof userId);\n        const roomData = {\n            topic: randomTopic,\n            status: \"waiting\",\n            player_a_health: 100,\n            player_b_health: 100,\n            player_a_ready: false,\n            player_b_ready: false,\n            player_a_id: userId\n        };\n        console.log(\"Room data to insert:\", roomData);\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").insert([\n            roomData\n        ]).select().single();\n        if (error) {\n            console.error(\"Error creating room:\", error);\n            throw new Error(\"Failed to create room\");\n        }\n        console.log(\"Successfully created room:\", data);\n        console.log(\"Final player_a_id in database:\", data.player_a_id);\n        return {\n            room: data,\n            playerRole: \"player_a\"\n        };\n    },\n    // Join an existing room\n    async joinRoom (roomId, userId) {\n        try {\n            // First, get the room to check its status\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                console.error(\"Error fetching room:\", fetchError);\n                throw new Error(\"Room not found\");\n            }\n            // Check if room is full\n            if (room.player_a_id && room.player_b_id) {\n                throw new Error(\"Room is full\");\n            }\n            // Use actual user ID or generate UUID for guests\n            let actualUserId = await this.getUserId();\n            if (!actualUserId) {\n                actualUserId = generateUUID();\n                console.log(\"Generated guest UUID for room joiner:\", actualUserId);\n            }\n            console.log(\"Current room state:\", {\n                player_a_id: room.player_a_id,\n                player_b_id: room.player_b_id\n            });\n            console.log(\"Joining with user ID:\", actualUserId);\n            // Determine which player slot to fill and role\n            let updateData;\n            let playerRole;\n            if (room.player_a_id === null || room.player_a_id === undefined) {\n                // Player A slot is empty\n                updateData = {\n                    player_a_id: actualUserId,\n                    player_a_ready: false\n                };\n                playerRole = \"player_a\";\n                console.log(\"Joining as Player A\");\n            } else if (room.player_b_id === null || room.player_b_id === undefined) {\n                // Player B slot is empty\n                updateData = {\n                    player_b_id: actualUserId,\n                    player_b_ready: false\n                };\n                playerRole = \"player_b\";\n                console.log(\"Joining as Player B\");\n            } else {\n                throw new Error(\"Room is full\");\n            }\n            console.log(\"Update data:\", updateData);\n            // Update the room\n            const { data, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error joining room:\", updateError);\n                throw new Error(\"Failed to join room\");\n            }\n            console.log(\"Successfully joined room as:\", playerRole, data);\n            // Force a small delay to ensure database consistency\n            setTimeout(()=>{\n                console.log(\"Room join completed, real-time updates should trigger\");\n            }, 100);\n            return {\n                room: data,\n                playerRole\n            };\n        } catch (error) {\n            console.error(\"Join room error:\", error);\n            throw error;\n        }\n    },\n    // Ready up for the game\n    async readyUp (roomId) {\n        try {\n            const userId = await this.getUserId();\n            // Get current room state\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                throw new Error(\"Room not found\");\n            }\n            // Determine which player is ready-ing up\n            let updateData = {};\n            if (room.player_a_id === userId) {\n                updateData.player_a_ready = true;\n            } else if (room.player_b_id === userId) {\n                updateData.player_b_ready = true;\n            } else {\n                throw new Error(\"You are not in this room\");\n            }\n            // Check if both players will be ready after this update\n            const bothReady = (room.player_a_id === userId ? true : room.player_a_ready) && (room.player_b_id === userId ? true : room.player_b_ready);\n            // If both players are ready, start the game\n            if (bothReady && room.player_a_id && room.player_b_id) {\n                updateData.status = \"debating\";\n            }\n            // Update the room\n            const { data, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error readying up:\", updateError);\n                throw new Error(\"Failed to ready up\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Ready up error:\", error);\n            throw error;\n        }\n    },\n    // Unready (cancel ready status)\n    async unready (roomId) {\n        try {\n            const userId = await this.getUserId();\n            // Get current room state\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                throw new Error(\"Room not found\");\n            }\n            // Determine which player is un-readying\n            let updateData = {};\n            if (room.player_a_id === userId) {\n                updateData.player_a_ready = false;\n            } else if (room.player_b_id === userId) {\n                updateData.player_b_ready = false;\n            } else {\n                throw new Error(\"You are not in this room\");\n            }\n            // If game was about to start, keep it in waiting status\n            if (room.status === \"debating\") {\n                updateData.status = \"waiting\";\n            }\n            // Update the room\n            const { data, error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId).select().single();\n            if (updateError) {\n                console.error(\"Error unreadying:\", updateError);\n                throw new Error(\"Failed to unready\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Unready error:\", error);\n            throw error;\n        }\n    },\n    // Leave room\n    async leaveRoom (roomId) {\n        try {\n            const userId = await this.getUserId();\n            // Get current room state\n            const { data: room, error: fetchError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n            if (fetchError || !room) {\n                throw new Error(\"Room not found\");\n            }\n            // Determine which player is leaving\n            let updateData = {};\n            if (room.player_a_id === userId) {\n                updateData.player_a_id = null;\n                updateData.player_a_ready = false;\n            } else if (room.player_b_id === userId) {\n                updateData.player_b_id = null;\n                updateData.player_b_ready = false;\n            } else {\n                throw new Error(\"You are not in this room\");\n            }\n            // Reset room status to waiting\n            updateData.status = \"waiting\";\n            // Update the room\n            const { error: updateError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").update(updateData).eq(\"id\", roomId);\n            if (updateError) {\n                console.error(\"Error leaving room:\", updateError);\n                throw new Error(\"Failed to leave room\");\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Leave room error:\", error);\n            throw error;\n        }\n    },\n    // Get room details\n    async getRoom (roomId) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"rooms\").select(\"*\").eq(\"id\", roomId).single();\n        if (error) {\n            console.error(\"Error fetching room:\", error);\n            return null;\n        }\n        return data;\n    },\n    // Subscribe to room changes\n    subscribeToRoom (roomId, callback) {\n        console.log(\"Setting up subscription for room:\", roomId);\n        const channel = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.channel(\"room:\".concat(roomId)).on(\"postgres_changes\", {\n            event: \"*\",\n            schema: \"public\",\n            table: \"rooms\",\n            filter: \"id=eq.\".concat(roomId)\n        }, (payload)=>{\n            console.log(\"Database change detected:\", payload);\n            if (payload.new) {\n                console.log(\"Calling callback with updated room:\", payload.new);\n                callback(payload.new);\n            }\n        }).subscribe((status)=>{\n            console.log(\"Subscription status:\", status);\n        });\n        return channel;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/roomService.ts\n"));

/***/ })

});